1. cat>file4.txt
welcome to website
user@chiradi-poojitha:~$ 

2 .create a folder called grepfile
user@chiradi-poojitha:~$ cat>grepfile.txt
welcome to ubuntu
linux and unix are commands 
rgukt is one of the most greatest community


user@chiradi-poojitha:~$ grep "welcome" grepfile.txt
welcome to ubuntu

4. Display the matched lines, but do not display the filenames.
user@chiradi-poojitha:~$ grep -h "to" grepfile.txt
welcome to ubuntu

5. Display the matched lines and their line numbers.
user@chiradi-poojitha:~$ grep -n "one" grepfile.txt
3:rgukt is one of the most greatest community

4. Specifies expression with this option. Can use multiple times.
user@chiradi-poojitha:~$ grep -e "linux" -e "unix" grepfile.txt
linux and unix are commands

5. This prints out all the lines that do not matches the pattern
user@chiradi-poojitha:~$ grep -v "one" grepfile.txt
welcome to ubuntu
linux and unix are commands

6. Print only the matched parts of a matching line, with each such part on a
separate output line.
user@chiradi-poojitha:~$ grep -o "is" grepfile.txt
is
user@chiradi-poojitha:~$ grep -o "o" grepfile.txt
o
o
o
o
o
o
o
user@chiradi-poojitha:~$ grep -o "u" grepfile.txt
u
u
u
u
u
u
u
user@chiradi-poojitha:~$ 

/////sort////


user@chiradi-poojitha:~$ cat>monthfile.txt
feburary 
march
june
may
january
december
july
october
^C
7. Sorts a file numerically (interprets data as numbers).
user@chiradi-poojitha:~$ sort -n monthfile.txt
december
feburary 
january
july
june
march
may
october

8. Sorts by month names.
user@chiradi-poojitha:~$ sort monthfile.txt
december
feburary 
january
july
june
march
may
october

user@chiradi-poojitha:~$ cat>number.txt
2
4
1
88
99
34
56
56
4
4
34
^C

9. Sorts a file numerically (interprets data as numbers).
user@chiradi-poojitha:~$ sort -n number.txt
1
2
4
4
4
34
34
56
56
88
99

10. Sorts and removes duplicate lines, providing a unique
sorted list.
user@chiradi-poojitha:~$ sort -u number.txt
1
2
34
4
56
88
99

user@chiradi-poojitha:~$ cat>sedfile.txt
this is poojitha
iam from cse
iam in e2^C

11. input for sed file:
user@chiradi-poojitha:~$ sed 's/poojitha/POOJITHA/' sedfile.txt
this is POOJITHA
iam from cse

12. which chsnges to capital.
user@chiradi-poojitha:~$ sed '/from/d' sedfile.txt
this is poojitha

13. it will display lines end with 'd'.
user@chiradi-poojitha:~$ sed '/rgukt/d' grepfile.txt
welcome to ubuntu
linux and unix are commands
user@chiradi-poojitha:~$ cat>awtfile.txt
poojitha storage id 1349
kavitha window id 1346
renu unix id 0112
ramyasri linux id 1569
prasanna phone id 1234
^C


14. For each record i.e line, the awk
command splits the record delimited by whitespace character by
default and stores it in the $n variables. If the line has 4 words, it
will be stored in $1, $2, $3 and $4 respectively. Also, $0 represents
the whole line.
user@chiradi-poojitha:~$ awk '{print $1,$3}' awtfile.txt
poojitha id
kavitha id
renu id
ramyasri id
prasanna id

15. To count the lines in a file:
user@chiradi-poojitha:~$ awk '{print NR}' awtfile.txt
1
2
3
4
5

16. Use of NR built-in variables (Display Line Number)
user@chiradi-poojitha:~$ awk '{print NR,$1}' awtfile.txt
1 poojitha
2 kavitha
3 renu
4 ramyasri
5 prasanna

17. Use of NR built-in variables (Display Line Number)
user@chiradi-poojitha:~$ awk '{print NR,$3}' awtfile.txt
1 id
2 id
3 id
4 id
5 id

user@chiradi-poojitha:~$ awk '{print NR,$0}' awtfile.txt
1 poojitha storage id 1349
2 kavitha window id 1346
3 renu unix id 0112
4 ramyasri linux id 1569
5 prasanna phone id 1234

18. To count the lines in a file:
user@chiradi-poojitha:~$ awk 'NR==2{print NR,$0}' awtfile.txt
2 kavitha window id 1346




